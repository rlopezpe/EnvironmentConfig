{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fcharset0 Calibri;}{\f1\fnil Courier New;}{\f2\fnil\fcharset0 Courier New;}{\f3\fnil\fcharset0 callibri;}{\f4\froman\fcharset2 Symbol;}{\f5\fmodern\fcharset0 Courier New;}{\f6\fnil\fcharset2 Symbol;}}
{\colortbl ;\red0\green0\blue127;\red0\green0\blue255;\red255\green255\blue255;\red163\green21\blue21;\red255\green0\blue0;\red0\green0\blue0;\red255\green255\blue0;\red127\green0\blue0;}
{\*\generator Msftedit 5.41.15.1515;}\viewkind4\uc1\pard\cf1\b\f0\fs32 EnvironmentConfig 1.3 \endash  Beta\par
\pard\brdrb\brdrs\brdrw20\brsp40 \sb40\cf0\b0\fs2\par
\pard\sa120\par
\pard\fs22\par
EnvironmentConfig (EC) has been revamped and now gives you more power and flexibility to set an application properties. You can now use complex values (structures) as properties and reuse properties as variables throughout the config file. Another neat feature added to this version is the ability to use ColdFusion methods that return a simple value in the config (XML) file, as well as the ability to create a ColdFusion component (CFC) as a config Bean populated with the properties on the fly.\par
\par
\b Version 1.3 - Beta\b0\par
\pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-360\li720 Fixed multiple bugs (see listed below)\par
{\pntext\f6\'B7\tab}Added \b EnvironmentConfig API\b0  that allows you to leverage some of it's core methods in your own applications. As of now two methods are exposed that you can use:\par
\pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-360\li1080\b createBeanFromStruct\b0 (Struct \i properties\i0 , String \i path\i0 , String \i setterAccess\i0 )\line Allows to create your own ColdFusion Bean class (CFC) based on a structure with properties. It takes three parameters: a structure of properties, the path were the CFC will be stored and the type of access you want the setter methods to have (e.g. public, private, package).\b\par
{\pntext\f6\'B7\tab}createColdSpringConfigFile\b0 (Struct \i properties\i0 , String \i beanFilePath\i0 , String \i csFilePath\i0 )\line Generates a ColdSpring definition file for a bean based on a structure of properties and writes it to disk. The import line in the main ColdSpring definition file must be written by hand.\par
\pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-360\li720 Added logic to handle \b application mappings \b0 structure.  You can now define the application mappings as a map called 'mappings' (by convention). The mappings structure will be returned once the method "ConfigureEnvironment()" is called and will be returned as a structure (separate from the properties structure).  This means that by using the EC variables you can define your application mappings only \b once \b0 and not worry about manually adding mappings to each server as long as you can point to the location relative to the root path. Here is an example:\line You can define a dynamic rootPath variable in the environmentConfig.xml file as\line\cf2\highlight3\f1\fs20 <\cf4 property\cf0  \cf5 name\cf6 ="\cf2 siteRootPath\cf6 "\cf2 >\cf6\highlight0 #expandPath('/')#\cf2 </\cf4 property\cf2 >\cf6\tab\cf0\f0\fs22\line\cf2\highlight3\f1\fs20 <\cf4 property\cf0  \cf5 name\cf6 ="\cf2 frameworksRoot\cf6 "\cf2 >\cf6 E:/library/frameworks\cf2 </\cf4 property\cf2 >\cf6\tab\tab\tab\cf0\highlight0\f0\fs22\line\cf6\f2\fs20 Then define the mappings as:\cf0\f0\fs22\line\pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\li720\tx1080\tx1440\tx1800\tx2160\cf2\highlight3\f1\fs20 <\cf4 property\cf0  \cf5 name\cf6 ="\cf2 mappings\cf6 "\cf2 >\cf0\highlight0\line\f2\tab\cf2\highlight3\f1 <\cf4 map\cf2 >\cf0\highlight0\line\f2\tab\tab\cf2\highlight3\f1 <\cf4 entry\cf0  \cf5 key\cf6 ="\cf2 /usdaCfcBusinessCommon\cf6 "\cf2 ><\cf4 value\cf2 >\cf6 $\{fullRootPath\}cfc\f2 /\f1 business\f2 /\f1 common\cf2 </\cf4 value\cf2 ></\cf4 entry\cf2 >\cf0\highlight0\line\f2\tab\tab\cf2\highlight3\f1 <\cf4 entry\cf0  \cf5 key\cf6 ="\cf2 /usdaCfcBusinessMycoDat\cf6 "\cf2 ><\cf4 value\cf2 >\cf6 $\{fullRootPath\}cfc\f2 /\f1 business\f2 /\f1 mycoDat\cf2 </\cf4 value\cf2 ></\cf4 entry\cf2 >\cf0\highlight0\line\cf2\highlight3\f2\tab\tab <\cf4\f1 entry\cf0  \cf5 key\cf6 ="\cf2 /usdaCfcBusinessTaxaData\cf6 "\cf2 ><\cf4 value\cf2 >\cf6 $\{fullRootPath\}cfc\f2 /\f1 business\f2 /\f1 taxaData\cf2 </\cf4 value\cf2 ></\cf4 entry\cf2 >\cf0\highlight0\line\f2\tab\tab\cf2\highlight3\f1 <\cf4 entry\cf0  \cf5 key\cf6 ="\cf2 /coldspring\cf6 "\cf2 ><\cf4 value\cf2 >\cf6 $\{frameworksRoot\}/coldspring\cf2 </\cf4 value\cf2 ></\cf4 entry\cf2 >\cf0\highlight0\f0\fs22\line\f2\fs20\tab\cf2\highlight3\f1 </\cf4 map\cf2 >\cf0\highlight0\f0\fs22\line\cf2\highlight3\f1\fs20 </\cf4 property\cf2 >\cf0\highlight0\f0\fs22\line\line All the properties above with the exception of \cf2\highlight3\f1\fs20 frameworksRoot\f2  \cf0\highlight0\f0\fs22 can be defined in the default properties section as it will work for all environments since the \cf2\highlight3\f1\fs20 siteRootPath\f2  \cf0\highlight0\f0\fs22 is being obtained dynamically by leveraging the ColdFusion method expandPath(). The \cf2\highlight3\f1\fs20 frameworksRoot\f2  \cf0\highlight0\f0\fs22 property must be defined on each environment to ensure it points to the right directory. Doing this will save you from having to manually create mappings for each application on each server environment. \par
\pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-360\li720\tx1080\tx1440\tx1800\tx2160 Bugs Fixed:\par
\pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-360\li1080\tx1080\tx1440\tx1800\tx2160 RIA Forge Bug #2: "nested $\{properties\} don't pan out" \par
{\pntext\f6\'B7\tab}RIA Forge Bug #3: "Problem parsing this" \par
{\pntext\f6\'B7\tab}RIA Forge Bug #4: "ColdSpringDefinitionMaker.cfc patch"\par
{\pntext\f6\'B7\tab}RIA Forge Bug #5: "Breaks when mixing text or EC variables with CFM output in the same property"\par
\pard\par
\par
\b Version 1.2 - Beta\b0\par
\pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-360\li720 A configuration property structure was created to control settings in EnvironmentConfig. The map property is called EC and is composed of 6 properties:\par
\pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-360\li1080\cf2\highlight3\f1\fs20 bCreateBeanFile\cf6\f2  (\f1 true\f2 |\b false\b0 ):\f3\fs22  \tab\tab If \i true\i0  EC will create a ColdFusion Class (CFC) based on the environment properties\cf0\highlight0\par
\cf2\highlight3\f1\fs20{\pntext\f6\'B7\tab}bCreateColdSpringFile\f2  \cf6 (\f1 true\f2 |\b false\b0 ): \tab\f3\fs22 If \i true\i0  EC will create the ColdSpring definition file for a CFC based on the environment properties\cf0\highlight0\f0\par
\cf2\highlight3\f1\fs20{\pntext\f6\'B7\tab}bUseFlattenedStruct\f2  \cf6 (\b\f1 true\b0\f2 |false):\fs22  \tab\f3 If \i true\i0  EC will use a flattened struct to create the CFC and the ColdSpring Definition file. This must be \i true\i0  if \i bCreateColdSpringFile \i0 is \i true. \i0 If this is \i false\i0  the \tab\tab\tab\tab\tab\tab\tab\tab generated CFC will contain a getter for every \i map\i0  property and return a structure; if \i true\i0  then the CFC will contain a getter for each individual property inside \tab\tab\tab\tab\tab\tab\tab every \i map\i0  property.\cf0\highlight0\par
\cf2\highlight3\f1\fs20{\pntext\f6\'B7\tab}sConfigBeanObjPath\f2  \cf6 (\b GlobalConfig\b0 ): \tab\f3\fs22 Defaults to the root path with class name GlobalConfig. Use dot notation for the path. For instance if you want your CFC to be created inside the \tab\tab\tab\tab\tab\tab\tab\tab\tab /model/common folder use \i model.common.GlobalConfig\i0  as the value. GlobalConfig is the name of the class, but you can name it anyway you want.\cf0\highlight0\par
\cf2\highlight3\f1\fs20{\pntext\f6\'B7\tab}sColdSpringDefFilePath\f2  \cf6 (\b /\b0 ):\f3\fs22  \tab\tab Defaults to the root path with a name that is equal to the CFC. This means by default the CS definition file is named globalConfig.xml.\cf0\highlight0\f0\par
\cf2\highlight3\f1\fs20{\pntext\f6\'B7\tab}bEmbedECIntoProperties\f2  \cf6 (\f1 true\f2 |\b false\b0 ): \tab\f3\fs22 If true EnvironmentConfig will return the \i EC\i0  configuration structure embedded into the main return structure, otherwise it returns the EC structure as its own \tab\tab\tab\tab\tab\tab\tab separate structure. The major effect of this is that if \i true\i0  and bCreateBeanFile is also \i true\i0 , then the auto generated CFC will contain EC properties as well in \tab\tab\tab\tab\tab\tab\tab it.\cf0\highlight0\line\pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-360\li720\cf6\highlight3\f2\fs20 If only the default values are going to be used there is no need to define the EC map. But if you want to use custom settings you must define it with the custom values in your \i Default \i0 or specific environment as shown below:\f1\tab\cf0\highlight0\f0\fs22\line\pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\li720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\cf2\highlight3\f1\fs20 <\cf4 property\cf0  \cf5 name\cf6 ="\cf2 EC\cf6 "\cf2 >\cf0\highlight0\line\cf2\highlight3\f2\tab\f1 <\cf4 map\cf2 >\cf0\highlight0\line\cf6\highlight3\f2\tab\tab\cf2\f1 <\cf4 entry\cf0  \cf5 key\cf6 ="\cf2 bCreateBeanFile\cf6 "\cf2 ><\cf4 value\cf2 >\cf6 true\cf2 </\cf4 value\cf2 >/\cf4 entry\cf2 >\cf6\tab\tab\tab\tab\f2\tab\cf0\highlight0\f1\line\cf6\highlight3\f2\tab\tab\cf2\f1 <\cf4 entry\cf0  \cf5 key\cf6 ="\cf2 bCreateColdSpringFile\cf6 "\cf2 ><\cf4 value\cf2 >\cf6 true\cf2 </\cf4 value\cf2 ></\cf4 entry\cf2 >\cf6\tab\tab\tab\f2\tab\cf0\highlight0\f1\line\cf6\highlight3\f2\tab\tab\cf2\f1 <\cf4 entry\cf0  \cf5 key\cf6 ="\cf2 bUseFlattenedStruct\cf6 "\cf2 ><\cf4 value\cf2 >\cf6 false\cf2 </\cf4 value\cf2 ></\cf4 entry\cf2 >\cf0\highlight0\line\cf6\highlight3\tab\f2\tab\cf2\f1 <\cf4 entry\cf0  \cf5 key\cf6 ="\cf2 sConfigBeanObjPath\cf6 "\cf2 >\cf0\highlight0\line\cf2\highlight3\f2\tab\tab\tab\f1 <\cf4 value\cf2 >\cf6 sampleApp.com.GlobalConfig\cf2 </\cf4 value\cf2 >\cf0\highlight0\line\cf2\highlight3\f2\tab\tab\f1 </\cf4 entry\cf2 >\cf0\highlight0\line\cf6\highlight3\tab\tab\cf2 <\cf4 entry\cf0  \cf5 key\cf6 ="\cf2 sColdSpringDefFilePath\cf6 "\cf2 >\cf0\highlight0\line\cf2\highlight3\f2\tab\tab\tab\f1 <\cf4 value\cf2 >\cf6 /sampleApp/config/\f2 g\f1 lobalConfigColdspring.xml.cfm\cf2 </\cf4 value\cf2 >\cf0\highlight0\line\cf2\highlight3\f2\tab\tab\f1 </\cf4 entry\cf2 >\cf0\highlight0\line\cf2\highlight3\f2\tab\tab\f1 <\cf4 entry\cf0  \cf5 key\cf6 ="\cf2 bEmbedECIntoProperties\cf6 "\cf2 ><\cf4 value\cf2 >\cf6 true\cf2 </\cf4 value\cf2 ></\cf4 entry\cf2 >\cf0\highlight0\f0\fs22\line\cf6\highlight3\f1\fs20\tab\cf2 </\cf4 map\cf2 >\cf0\highlight0\f0\fs22\line\cf2\highlight3\f1\fs20 </\cf4 property\cf2 >\cf0\highlight0\f0\fs22\par
\pard\par
\b Version 1.1\b0 :\par
\pard\fi-360\li720\sb100\sa100\tx720\f4\fs20\'b7\tab\f0\fs22 Use of complex values as structures in the form of map->property (just like in ColdSpring). Thanks to \cf7\ul Paul Marcotte\cf0\ulnone  for adding this functionality\par
\f4\fs20\'b7\tab\f0\fs22 Use of ColdFusion hash tags to generate output that return a simple value.  For instance you can use methods that return simple values such as #expandPath("/uploads")# and you will get the absolute path of the folder as the value of a property like "C:\\sites\\mysite\\assets\\uploads"; or something simpler like #10+5# which will output 15.\par
\f4\fs20\'b7\tab\f0\fs22 Reuse properties as variables in the config file using the syntax \f5\fs20 $\{propertyName\}\f0\fs22 . For instance let\rquote s say you have a folder path of /assets, but under assets you have /images, /videos, etc. You can now set a property for assets as\line\cf2\f5\fs20 <\cf8 property\cf0  \cf5 name\cf6 ="\cf2 assetsPath\cf6 "\cf2 >\cf6 /assets\cf2 </\cf8 property\cf2 >\cf0\f0\fs22\line then you can set the images and videos path as\line\cf2\f5\fs20 <\cf8 property\cf0  \cf5 name\cf6 ="\cf2 imagesPath\cf0 "\cf2 >\cf0 $\{assetsPath\}/images\cf2 </\cf8 property\cf2 >\cf0\line\cf2 <\cf8 property\cf0  \cf5 name\cf6 ="\cf2 videosPath\cf0 "\cf2 >\cf0 $\{assetsPath\}/videos\cf2 </\cf8 property\cf2 >\cf0\f0\fs22\par
\f4\fs20\'b7\tab\f0\fs22 EC now return two structures with the properties, one is a structure with sub-structures (if you use complex values) and another one flattened (thanks to \cf7\ul Tom De Manincor\cf0\ulnone )\par
\f4\fs20\'b7\tab\f0\fs22 Another new feature is that EC can create a properties Bean for you on the fly. So, if instead of using properties in a struct as properties.myProperty you can encapsulate them in a Bean object. The properties will be read-only and you would access them like GlobalConfig.getMyProperty(). You can specify where you want it written to by passing the object notation path as 'model.GlobalConfig', EC will create the file then under '/model' as 'GlobalConfig.cfc'\~ I prefer this over the structure as the application properties are read-only and no one can modify them during the application's life.\par
\f4\fs20\'b7\tab\f0\fs22 If you use ColdSpring as your object factory, tell EC to create the ColdSpring definition file for you and all you have to do is add the include line at the bottom of your main ColdSpring file. From there on you can ask ColdSpring for the properties bean as you'd do with any other object.\par
\pard\par
This version still on Beta, but if you want to try it feel free to download it from the RIA Forge page \cf7\ul http://environmentconfig.riaforge.org/\cf0\ulnone\par
\par
I look forward to getting feedback from you on features you'd like to see added. Report bugs at the RIAForge page.\par
\par
\tab\par
\par
}
 